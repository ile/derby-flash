// Generated by CoffeeScript 1.8.0
var Model, racer;

racer = require('racer');

Model = racer.Model;

module.exports = function(app, options) {
  var Flash;
  if (options == null) {
    options = {};
  }
  return Flash = (function() {
    var middleware, originalRouter;

    function Flash() {}

    Flash.prototype.view = __dirname;

    app.on('render', function(app) {
      var data, flashq, model, obj, type, _i, _len;
      model = app.model;
      flashq = model.get('_flash.flashq') || {};
      if (flashq) {
        for (type in flashq) {
          data = flashq[type];
          if (data instanceof Array) {
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              obj = data[_i];
              if (typeof obj.msg === 'string' && model.toast && (options.useToast || obj.toast)) {
                model.toast(type, obj.msg);
              } else {
                model.root.push("_page.flash." + type, obj.msg);
              }
            }
          } else {
            model.root.set("_page.flash." + type, data);
          }
        }
      }
      return model.del('_flash.flashq');
    });

    Model.prototype.flash = function(type, msg, useToast) {
      var _ref;
      if (type && msg) {
        if (((_ref = this.req) != null ? _ref.flash : void 0) && !useToast) {
          return this.req.flash(type, msg);
        } else {
          return this.root.push("_flash.flashq." + type, {
            msg: msg,
            toast: useToast
          });
        }
      }
    };

    originalRouter = app.router;

    middleware = function(req, res, next) {
      var model, msg, msgs, obj, type, _i, _len, _ref;
      if (req.flash) {
        model = req.getModel();
        msgs = req.flash();
        for (type in msgs) {
          _ref = msgs[type];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            msg = _ref[_i];
            if (typeof msg === 'string') {
              model.push("_flash.flashq." + type, {
                msg: msg
              });
            } else {
              for (obj in msg) {
                model.set("_flash.flashq." + type + "." + obj, msg[obj]);
              }
            }
          }
        }
      }
      return (originalRouter())(req, res, next);
    };

    app.router = function() {
      return middleware;
    };

    return Flash;

  })();
};
